#!/usr/bin/env python3

import json
import http.server
import os
import socketserver
import threading
import random

PORT = int(os.environ.get('WEBSERVER_PORT', 8080))

class RestHandler(http.server.BaseHTTPRequestHandler):

    _stats = {}
    _history = []

    def do_GET(self):
        if self.path == '/fail':
            self.send_response(self._generateRandomCode())
        else:
            self.send_response(200)
        self.send_header('Content-type','application/json')
        self.end_headers()
        if self.path == '/dummy/stats':
            self.wfile.write(json.dumps(self._getStats()).encode('UTF-8'))
        elif self.path == '/dummy/history':
            self.wfile.write(json.dumps(self._getHistory()).encode('UTF-8'))
        elif self.path == '/dummy/clear':
            self._clear()
        else:
            self._register()
        return

    def do_POST(self):
        body = ''
        try:
            if 'content-length' in self.headers:
                length = int(self.headers['content-length'])
                body = str(self.rfile.read(length), "utf-8") if length > 0 else ''
            json.loads(body)
        except:
            self.send_response(400)
        else:
            if self.path == '/fail':
                self.send_response(self._generateRandomCode())
            else:
                self.send_response(200)
        self.send_header('Content-type','application/json')
        self.end_headers()
        self._register(body)
        return

    def _register(self, body=''):
        with lock:
            if self.path not in RestHandler._stats:
                RestHandler._stats[self.path] = 0
            RestHandler._stats[self.path] += 1
            RestHandler._history.append({'path': self.path, 'verb':self.command , 'body': body, 'headers': [{h: self.headers[h]} for h in self.headers ]})

    def _clear(self):
        with lock:
            RestHandler._stats = {}
            RestHandler._history = []

    def _getStats(self):
        with lock:
            return RestHandler._stats

    def _getHistory(self):
        with lock:
            return RestHandler._history

    def _generateRandomCode(self):
        return random.choice(list(range(401, 418))+list(range(500, 505)))

class ThreadedHTTPServer(socketserver.ThreadingMixIn, http.server.HTTPServer):
    """Handle requests in a separate thread."""

if __name__ == "__main__":
    global lock
    lock = threading.Lock()

    httpd = ThreadedHTTPServer(("", PORT), RestHandler)

    print("Serving at port: {}".format(PORT))
    httpd.serve_forever()